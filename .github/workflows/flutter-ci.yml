name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: write
  packages: read

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create .env file from secrets
      run: |
        echo "BASE_URL=${{ secrets.BASE_URL }}" > .env
        echo "LOGIN_ENDPOINT=${{ secrets.LOGIN_ENDPOINT }}" >> .env
        echo "REGISTER_ENDPOINT=${{ secrets.REGISTER_ENDPOINT }}" >> .env
        echo "STORE_ENDPOINT=${{ secrets.STORE_ENDPOINT }}" >> .env
        echo "PRODUCTS_ENDPOINT=${{ secrets.PRODUCTS_ENDPOINT }}" >> .env
        echo "ORDERS_ENDPOINT=${{ secrets.ORDERS_ENDPOINT }}" >> .env
        echo "DASHBOARD_STATS_ENDPOINT=${{ secrets.DASHBOARD_STATS_ENDPOINT }}" >> .env
        echo "DASHBOARD_PRODUCTS_ENDPOINT=${{ secrets.DASHBOARD_PRODUCTS_ENDPOINT }}" >> .env
        echo "DASHBOARD_ORDERS_ENDPOINT=${{ secrets.DASHBOARD_ORDERS_ENDPOINT }}" >> .env
        echo "DASHBOARD_SALES_CHART_ENDPOINT=${{ secrets.DASHBOARD_SALES_CHART_ENDPOINT }}" >> .env

    - name: Set up Flutter
      uses: subosito/flutter-action@v2
      with:
        flutter-version: '3.24.0'
        channel: 'stable'

    - name: Install dependencies
      run: flutter pub get

    # - name: Analyze code
    #   run: flutter analyze

    - name: Run tests
      run: flutter test

    - name: Build APK
      run: flutter build apk --release

    - name: Create Release
      if: github.event_name == 'push'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        gh release create "${{ github.run_number }}" build/app/outputs/flutter-apk/app-release.apk \
          --title "Release ${{ github.run_number }}" \
          --notes "Automated release by GitHub Actions"

    - name: Get APK URL
      id: apk_url
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        APK_URL=$(gh release view "${{ github.run_number }}" --json assets | jq -r '.assets[0].url')
        echo "APK_URL=$APK_URL" >> $GITHUB_OUTPUT

    - name: Install qrencode
      run: sudo apt-get update && sudo apt-get install -y qrencode

    - name: Generate QR code
      id: generate_qr
      run: |
        qrencode -o qr-code.png -s 10 "${{ steps.apk_url.outputs.APK_URL }}"
        echo "QR_BASE64=$(base64 -w 0 qr-code.png)" >> $GITHUB_OUTPUT

    - name: Send Email with QR code
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.EMAIL_USERNAME }}
        password: ${{ secrets.EMAIL_PASSWORD }}
        subject: "New Tdiscount Vendor APK Release"
        to: ${{ secrets.RECIPIENT_EMAIL }}
        from: ${{ secrets.EMAIL_USERNAME }}
        html_body: |
          <h2>New Tdiscount Vendor APK Release</h2>
          <p>Download the APK <a href="${{ steps.apk_url.outputs.APK_URL }}">here</a>.</p>
          <p>Scan the QR code below to download:</p>
          <img src="data:image/png;base64,${{ steps.generate_qr.outputs.QR_BASE64 }}" alt="QR Code">
        attachments: qr-code.png

    - name: Create a tag for release
      run: |
        git config --global user.email "github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git tag "build-${{ github.run_number }}"
        git push origin "build-${{ github.run_number }}"